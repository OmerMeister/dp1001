pipeline {
    agent any

    parameters {
        string(name: 'CALLED_BY_OTHER', defaultValue: 'no', description: 'indicate if the pipeline was called by other pipeline')
        string(name: 'templatesArray', defaultValue: '', description: 'array of k8s templates to apply')
    }

    stages {
        stage('build k8s_templates list') {
            steps {
                script {
                    // Path to the k8s_templates.txt file
                    def filePath = "deployment/k8s_templates.txt"

                    // Read the contents of the file
                    def fileContent = readFile(file: filePath).trim()

                    // Split the file content into an array using newline as separator
                    templatesArray = fileContent.split('\n')

                    // Print the array
                    echo "following k8s_templates will be created and pushed: ${templatesArray}"
                }
            }
        }
        stage('Update EKS') {
            steps {
                script {
                    // Conditionally execute steps based on the value of CALLED_BY_OTHER
                    if (params.CALLED_BY_OTHER == 'no') {
                        echo "k8s update was triggered by self action"
                    } 
                    else {
                        echo "k8s update was triggered by pipeline: ${params.CALLED_BY_OTHER}"    
                    }

                    //configure the correct cluster
                    sh "aws eks update-kubeconfig --name dp1001 --region us-east-1"

                    // Login to ECR
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 671231939531.dkr.ecr.us-east-1.amazonaws.com"

                    dir('deployment/k8s') {
                        for (def template in templatesArray) {
                        echo "applying template ${template}"
                            // update secrets from jenkins' credentials manager
                            if (template == 'secrets.yaml') {
                                // Use the MOVIEDB_API_KEY_64ENCODED credential
                                withCredentials([string(credentialsId: 'MOVIEDB_API_KEY_64ENCODED', variable: 'replace_string')]) {
                                def original_string = "MOVIEDB_API_KEY_64ENCODED_PLACEHOLDER"
                                // replace the placeholder string in the secret defention with the real one which is stored on jenkins
                                sh "sed -i 's#${original_string}#${replace_string}#g' ${template}"
                                }
                            }
                        sh "kubectl apply -f ${template}"
                        }
                    }
                }
            }
        }
        stage('update backend+frontend dns records') {
            steps {
                script {
                    dir('deployment') {
                        sh 'sleep 7'
                        sh 'chmod 700 update_backend_api_url.sh'
                        sh './update_backend_api_url.sh'
                    }
                }
            }
        }
    }
    post {
        always {
            echo '--delete all workspace files--'
            cleanWs()
        }
    }
}